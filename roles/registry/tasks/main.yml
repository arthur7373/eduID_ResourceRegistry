- name: Install MySQL
  apt: pkg=mysql-server update_cache=yes cache_valid_time=36000

- name: Install PHP and modules
  apt: pkg={{ item }} update_cache=yes cache_valid_time=36000
  with_items:
    - php5
    - php5-apcu
    - php5-cli
    - php5-curl
    - php5-mysql
    - php5-mcrypt
    - php5-memcached


- name: Install Python modules
  apt: pkg={{ item }} update_cache=yes cache_valid_time=36000
  with_items:
    - python-mysqldb

- name: Install Zip
  apt: pkg=zip update_cache=yes cache_valid_time=36000

- name: Install memcached
  apt: pkg=memcached update_cache=yes cache_valid_time=36000

- name: Install Java Runtime for XMLsec Tool
  apt: pkg=openjdk-7-jre update_cache=yes cache_valid_time=36000

# - name: Install xmlsec tool for metadata signing
#   apt: pkg=xmlsec1 update_cache=yes cache_valid_time=36000

- name: Install gearman for metadata signing
  apt: pkg=gearman update_cache=yes cache_valid_time=36000


# Apache

- name: Install apache2
  apt: pkg=apache2 update_cache=yes cache_valid_time=36000

- name: Enable Apache Rewrite modules
  command: a2enmod rewrite
  notify: restart apache

# - name: Enable Apache unique_id modules
#   command: a2enmod unique_id ssl
#   notify: restart apache

- name: Copy apache2 config file
  template: >
    src=apache2.conf.j2
    dest=/etc/apache2/sites-available/{{ fqdn }}.conf
  notify: restart apache

- name: Disable default configuration
  command: a2dissite 000-default
  notify: restart apache

- name: Enable IdP configuration
  command: a2ensite {{ fqdn }}
  notify: restart apache


- name: Check if there is a website certificate locally
  become: False
  local_action:
    module: stat
    path: "roles/registry/files/{{ fqdn }}.crt"
  register: have_web_cert

- name: Check if there is a website key locally
  become: False
  local_action:
    module: stat
    path: "roles/registry/files/{{ fqdn }}.key"
  register: have_web_key

############ <self-signed cert> ##################################
- name: Copy Web certificate config file
  template: >
    src=web_cert.cnf.j2
    dest=/tmp/web_cert.cnf
  when: (have_web_cert.stat.exists == False) and (have_web_key.stat.exists == False)

- name: Generate key and certificate
  command: openssl req -x509 -nodes -days 1095 -newkey rsa:2048 -config /tmp/web_cert.cnf -keyout {{ certificate_key_path }} -out {{ certificate_cert_path }}
  when: (have_web_cert.stat.exists == False) and (have_web_key.stat.exists == False)

- name: Tighten permission on key
  file: > 
    path={{ certificate_key_path }} 
    owner=root
    group=ssl-cert
    mode=0600
  when: (have_web_cert.stat.exists == False) and (have_web_key.stat.exists == False)
################## </Self-signed>#############################


- name: Copy TLS key
  copy: >
    src={{ fqdn }}.key
    dest={{ certificate_key_path }}
    owner=root
    group=ssl-cert
    mode=0600
  when: have_web_key.stat.exists == True
  notify: restart apache

- name: Copy TLS certificate
  copy: >
    src={{ fqdn }}.crt
    dest={{ certificate_cert_path }}
  when: have_web_cert.stat.exists == True
  notify: restart apache


- name: Add default ServerName
  template: >
    src=apache2_fqdn.conf.j2
    dest=/etc/apache2/conf-available/fqdn.conf
  notify: restart apache

- name: Enable default ServerName
  command: a2enconf fqdn
  notify: restart apache


- name: Copy php.ini
  copy: >
    src=php.ini
    dest=/etc/php5/apache2/php.ini
  notify: restart apache



- name: Create download directory
  file: >
    path=/usr/local/dist
    state=directory


# CodeIgniter

- name: Download CodeIgniter v3
  get_url: >
    url=https://codeload.github.com/bcit-ci/CodeIgniter/zip/{{ codeigniter_version }}
    dest=/usr/local/dist/

- name: Extract CodeIgniter
  unarchive: >
    src=/usr/local/dist/CodeIgniter-{{ codeigniter_version }}.zip
    dest=/opt/
    copy=no

- name: Copy CodeIgniter config
  template: >
    src=codeigniter_config.php.j2
    dest=/opt/CodeIgniter-{{ codeigniter_version }}/application/config/config.php


# Composer

- name: Download Composer
  shell: php -r "readfile('https://getcomposer.org/installer');" > /usr/local/dist/composer-setup.php

- name: Verify Composer
  command: php -r "if (hash('SHA384', file_get_contents('/usr/local/dist/composer-setup.php')) === '41e71d86b40f28e771d4bb662b997f79625196afcca95a5abf44391188c695c6c1456e16154c75a211d238cc3bc5cb47') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"

- name: Run Composer Installer
  command: php /usr/local/dist/composer-setup.php
  args:
    chdir: /usr/local/dist

- name: Move executable into path
  shell: mv /usr/local/dist/composer.phar /usr/local/bin/composer

- name: Remove Composer Installer
  command: php -r "unlink('/usr/local/dist/composer-setup.php');"


# MySQL

- name: Create MySQL database
  mysql_db: name={{ mysql_dbname }} state=present

- name: Create Database User
  mysql_user: > 
    name={{ mysql_user }}
    password={{ mysql_password }}
    priv={{ mysql_dbname }}.*:ALL 
    state=present
  no_log: true


# Download Jagger

- name: Download Jagger
  get_url: >
    url=https://github.com/Edugate/Jagger/archive/1.x-stable.zip
    dest=/usr/local/dist/

- name: Extract Jagger
  unarchive: >
    src=/usr/local/dist/Jagger-1.x-stable.zip
    dest=/var/www
    copy=no

- name: Move extracted directory
  command: mv /var/www/Jagger-1.x-stable /var/www/rr3 creates=/var/www/rr3

- name: Run Jagger install script
  command: /var/www/rr3/install.sh script
  args:
    chdir: /var/www/rr3

- name: Copy Jagger config
  template: >
    src=jagger_config.php.j2
    dest=/var/www/rr3/application/config/config.php

- name: Copy Jagger RR config
  template: >
    src=jagger_config_rr.php.j2
    dest=/var/www/rr3/application/config/config_rr.php

- name: Copy Jagger RR config
  template: >
    src=jagger_database.php.j2
    dest=/var/www/rr3/application/config/database.php

- name: Copy Jagger email config
  template: >
    src=jagger_email.php.j2
    dest=/var/www/rr3/application/config/email.php

- name: Copy Jagger memcached config
  template: >
    src=jagger_memcached.php.j2
    dest=/var/www/rr3/application/config/memcached.php

- name: Copy Jagger index file
  template: >
    src=jagger_index.php.j2
    dest=/var/www/rr3/index.php

- name: Run Jagger composer script
  composer:
    command: install
    working_dir: /var/www/rr3/application

- name: Populate Jagger database
  command: /var/www/rr3/application/doctrine orm:schema-tool:create && touch /var/www/rr3/application/db_populated.status
  args:
    chdir: /var/www/rr3/application
    creates: /var/www/rr3/application/db_populated.status

- name: Regenerate Jagger database Proxies (for production)
  command: /var/www/rr3/application/doctrine orm:generate-proxies
  args:
    chdir: /var/www/rr3/application

- name: Copy logo of the organization
  copy: >
    src={{ federation_logo }}
    dest=/var/www/rr3/images/

- name: Hand all over to www-data User
  file: >
    path=/var/www/rr3
    state=directory
    owner=www-data
    recurse=yes


# XMLsectool

- name: Download XMLsectool
  get_url: >
    url=http://shibboleth.net/downloads/tools/xmlsectool/latest/xmlsectool-{{ xmlsectool_version }}-bin.zip
    dest=/usr/local/dist/

- name: Unpack XMLsectool
  unarchive: >
    src=/usr/local/dist/xmlsectool-{{ xmlsectool_version }}-bin.zip
    dest=/opt
    copy=no

- name: Link xmlsectool bin
  file: >
    src=/opt/xmlsectool-{{ xmlsectool_version }}
    dest=/opt/xmlsectool
    state=link
